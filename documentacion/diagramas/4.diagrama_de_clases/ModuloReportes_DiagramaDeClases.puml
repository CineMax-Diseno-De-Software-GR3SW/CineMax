@startuml ModuloReportes_DiagramaDeClases

' Estilos
left to right direction
skinparam linetype ortho


' Paquetes principales
package com.cinemax.reportes.controladores {
    class ControladorReportesPrincipal {
        - Button botonRegresar
        - Button botonFiltrar
        - Button botonConfirmar
        - ComboBox<String> elegirHorario
        - BarChart<String, Number> diagramaBarras
        - PieChart diagramaPastel
        - ObservableList<ReporteGenerado> reportesGenerados
        - ServicioDeReportes servicioReportes
        - Map<String, Object> datos
        - List<Map<String, Object>> estadisticas
        - List<ReporteGenerado> reportesSimulados
        --
        + void initialize()
        - void configurarTablaReportes()
        - List<ReporteGenerado> cargarReportesDesdeCarpeta()
        - void cargarReportesSimulados()
        - void inicializarGraficasVacias()
        - void abrirReporte(ReporteGenerado reporte)
        + void irAReporteProgramado(ActionEvent event)
        + void filtrar(ActionEvent event)
        + void confirmarReporte(ActionEvent event)
        - void actualizarGraficaBarras(List<Map<String, Object>> estadisticas)
        - void actualizarGraficaPastel(List<Map<String, Object>> estadisticas)
        - void exportarReporte(Exportable strategy, String tipo)
        - void mostrarPrevisualizacionReporte(List<Map<String, Object>> datos, boolean permitirDescarga)
        - VBox generarContenidoReporteCompleto(List<Map<String, Object>> datos)
        - HBox crearEstadistica(String titulo, String valor)
        - BarChart<String, Number> crearGraficaBarrasPreview(List<Map<String, Object>> datos)
        - PieChart crearGraficaPastelPreview(List<Map<String, Object>> datos)
        - Label crearCeldaTabla(String texto, boolean esHeader)
        + void volverEscena(ActionEvent event)
    }

    class ControladorReportesProgramados {
        - Button botonRegresar
        - ComboBox<String> elegirFrecuencia
        - ServicioReportesProgramados servicioReporteProgramado
        - ServicioDeReportes servicioVentas
        - Map<String, Object> datos
        --
        + void initialize()
        - void inicializarTablaReportes()
        + void confirmarReporteProgramado(ActionEvent event)
        - boolean existeReporteConFrecuencia(String frecuencia)
        - void mostrarVentanaPrevia()
        - Label crearCeldaTabla(String texto, boolean esHeader)
        - HBox crearFilaTabla(String fecha, String boletos, String ingresos)
        - void agregarReporteATabla(String fechaEjecucion)
        + void eliminarReporteProgramado(ReporteGenerado reporte)
        - void mostrarVistaPrevia(ReporteGenerado reporte)
        - VBox generarContenidoReporte(ReporteGenerado reporte)
        - void descargarReporte(ReporteGenerado reporte, String formato)
        + void irAReportesPrincipal(ActionEvent event)
        + void volverEscena(ActionEvent event)
    }
}

package com.cinemax.reportes.modelos #lightgoldenrodyellow {
    interface EstrategiaDeFrecuencia #lightblue{
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }

    class EstrategiaDiaria #lightblue implements EstrategiaDeFrecuencia {
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }
    class EstrategiaSemanal #lightblue implements EstrategiaDeFrecuencia {
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }
    class EstrategiaMensual #lightblue implements EstrategiaDeFrecuencia {
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }
    class EstrategiaTrimestal #lightblue implements EstrategiaDeFrecuencia {
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }
    class EstrategiaAnual #lightblue implements EstrategiaDeFrecuencia {
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }

    class ReporteGenerado {
        - int id
        - String nombre
        - String tipo
        - LocalDateTime fechaGeneracion
        - String rutaArchivo
        - String descripcion
        - String estado
        - String frecuencia
        --
    }
}


package com.cinemax.reportes.servicios #lightgoldenrodyellow {
    class ServicioDeReportes {
        --
        + ServicioDeReportes()
        + Map<String, Object> getResumenDeVentas()
        + List<Map<String, Object>> getEstadisticasDeBarras()
        + List<Map<String, Object>> obtenerDatosFiltrados(List<Map<String, Object>> datos, String desde, String hasta)
    }
    class ServicioReportesProgramados #lightblue {
        - static ServicioReportesProgramados instance
        - List<ReporteGenerado> reportesPendientes
        - ObservableList<ReporteGenerado> reportesEjecutados
        - ScheduledExecutorService scheduler
        --
        - ServicioReportesProgramados()
        + static ServicioReportesProgramados getInstance()
        + void iniciarScheduler()
        + void detenerScheduler()
        + List<ReporteGenerado> getReportesPendientes()
        + ObservableList<ReporteGenerado> getReportesEjecutados()
        - void revisarReportesPendientes()
        - EstrategiaDeFrecuencia getStrategy(String frecuencia)
        - LocalDateTime calcularSiguienteEjecucion(LocalDateTime fechaGeneracion, String frecuencia)
        + String calcularProximaEjecucion(String fechaGeneracionStr, String frecuencia)
    }
    ServicioReportesProgramados --> ReporteGenerado
    ServicioReportesProgramados --> EstrategiaDeFrecuencia
}



package com.cinemax.utilidades.strategyParaDocumentos #lightgoldenrodyellow {
    interface Exportable #lightblue {
        + void exportar(ReporteGenerado reporte, File archivo, Map<String, Object> datos)
        + void exportarFormatoPrincipal(List<Map<String, Object>> datos, File destino, String tituloReporte, Map<String, Object> infoExtra)
    }

    class EstrategiaExportarPDF #lightblue implements Exportable  {
        + void exportar(ReporteGenerado reporte, File archivo, Map<String, Object> datos)
        + void exportarFormatoPrincipal(List<Map<String, Object>> datos, File destino, String tituloReporte, Map<String, Object> infoExtra)
        + static PDDocument crearDocumentoPDF()
        + static void guardarPDF(PDDocument document, File archivo)
    }

    class EstrategiaExportarCSV #lightblue implements Exportable {
        + void exportar(ReporteGenerado reporte, File archivo, Map<String, Object> datos)
        + void exportarFormatoPrincipal(List<Map<String, Object>> datos, File destino, String tituloReporte, Map<String, Object> infoExtra)
    }
}

' Relaciones
ControladorReportesPrincipal --> ServicioDeReportes
ControladorReportesPrincipal --> Exportable
ControladorReportesPrincipal --> EstrategiaExportarPDF
ControladorReportesPrincipal --> EstrategiaExportarCSV



ControladorReportesProgramados --> ServicioReportesProgramados
ControladorReportesProgramados --> ServicioDeReportes
ControladorReportesProgramados --> Exportable
ControladorReportesProgramados --> EstrategiaExportarPDF
ControladorReportesProgramados --> EstrategiaExportarCSV

ServicioReportesProgramados --> ServicioReportesProgramados


ReporteGenerado <-- ControladorReportesPrincipal
ReporteGenerado <-- ControladorReportesProgramados

@enduml