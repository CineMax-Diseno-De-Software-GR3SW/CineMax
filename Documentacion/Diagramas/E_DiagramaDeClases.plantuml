@startuml

title Diagrama de Clases - Gesti√≥n de Reportes

skinparam linetype ortho

package com.cinemax.reportes.controladores {
    class ControladorReportesProgramados {
        - tablaReportesGenerados : TableView<ReporteGenerado>
        - choiceFrecuencia : ChoiceBox<String>
        - schedulerService : ReportesSchedulerService
        - ventasService : VentasService
        - datos : Map<String, Object>
        + descargarReporte(reporte: ReporteGenerado, formato: String)
        + mostrarVistaPrevia(reporte: ReporteGenerado)
        + inicializarTablaReportes()
        + confirmarReporteProgramado(event: ActionEvent)
        + eliminarReporteProgramado(reporte: ReporteGenerado)
    }
    class ControladorReportesPrincipal
}

package com.cinemax.reportes.modelos {
    interface Export {
        + exportar(reporte: ReporteGenerado, archivo: File)
    }
    class ExportarPDFStrategy implements Export{
    + exportar(reporte: ReporteGenerado, archivo: File)
    }
    class ExportarCSVStrategy implements Export{
    + exportar(reporte: ReporteGenerado, archivo: File)
    }

    class ReporteGenerado {
        - nombreReporte : String
        - fechaGeneracion : LocalDateTime
        - estado : String
        - frecuencia : String
        - rutaArchivo : String
        + getNombreReporte()
        + getFechaGeneracion()
        + getEstado()
        + getFrecuencia()
        + getRutaArchivo()
    }

    interface FrecuenciaStrategy {
        + calcularSiguiente(fechaGeneracion: LocalDateTime) : LocalDateTime
    }
    class DiarioStrategy implements FrecuenciaStrategy{
    + calcularSiguiente(fechaGeneracion: LocalDateTime) : LocalDateTime
    }
    class SemanalStrategy implements FrecuenciaStrategy{
    + calcularSiguiente(fechaGeneracion: LocalDateTime) : LocalDateTime
    }
    class MensualStrategy implements FrecuenciaStrategy{
    + calcularSiguiente(fechaGeneracion: LocalDateTime) : LocalDateTime
    }
    class TrimestralStrategy implements FrecuenciaStrategy{
    + calcularSiguiente(fechaGeneracion: LocalDateTime) : LocalDateTime
    }
    class AnualStrategy implements FrecuenciaStrategy{
        + calcularSiguiente(fechaGeneracion: LocalDateTime) : LocalDateTime
    }
}

package com.cinemax.reportes.modelos.persistencia {
    class VentaDAO {
        + obtenerResumenVentas() : Map<String, Object>
    }
    
}

package BaseDeDatos <<Database>>{
    
}

VentaDAO --> BaseDeDatos

package com.cinemax.reportes.servicios {
    class ReportesSchedulerService {
        + getReportesEjecutados() : ObservableList<ReporteGenerado>
        + getReportesPendientes() : List<ReporteGenerado>
        + iniciarScheduler()
        + detenerScheduler()
        + calcularProximaEjecucion(fecha: String, frecuencia: String) : String
    }
    class VentasService {
        + getResumenDeVentas() : Map<String, Object>
    }
}

' Relaciones
ControladorReportesProgramados --> ReporteGenerado
ControladorReportesProgramados --> Export
ControladorReportesProgramados --> ReportesSchedulerService
ControladorReportesProgramados --> VentasService
VentasService --> VentaDAO
ReporteGenerado --> FrecuenciaStrategy

@enduml