@startuml General_DiagramaDeClases
skinparam linetype ortho

package empleados {
' ============================== MODELO DE DOMINIO ==============================
package modelo {
'package entidades{
class Usuario {
  - id: Long
  - nombreUsuario: String
  - correo: String
  - clave: String
  - nombreCompleto: String
  - cedula: String
  - celular: String
  - activo: boolean
  - fechaCreacion: DateTime
  - fechaUltimaModificacion: DateTime
  - requiereCambioClave: boolean
  --
  + verificarClave(ingresada: String): boolean
  + getNombreRol(): String
  + getDescripcionRol(): String
}

class Rol {
  - id: Long
  - nombre: String
  - descripcion: String
  - activo: boolean
  - permisos: Set<Permiso>
  --
  + tienePermiso(permiso: Permiso): boolean
  + agregarPermiso(permiso: Permiso): void
  + removerPermiso(permiso: Permiso): void
}

enum Permiso {
    GESTIONAR_USUARIO
    VENDER_BOLETO
    GESTIONAR_SALA
    GESTIONAR_FUNCION
    GESTIONAR_REPORTES
}
'}

}

Usuario  *-- "1" Rol
Permiso "0..*" -o  Rol

' ============================== SERVICIOS ==============================

package servicios{

' ============================== SERVICIOS DE VALIDACIÓN ==============================
class ValidadorUsuario {
    - {static} EMAIL_PATTERN : Pattern
   + validarCorreo(correo: String): boolean
   + validarClave(clave: String): boolean
   + validarCelular(celular: String): boolean
}

' ============================== SERVICIOS DE SESIÓN Y SEGURIDAD ==============================
class ServicioSesionSingleton {
  - {static} servicioSesion: ServicioSesionSingleton
  - usuarioActivo: Usuario
  --
  + {static} getInstancia(): ServicioSesionSingleton
  + iniciarSesion(nombreUsuario: String, clave: String): Usuario
  + cerrarSesion(): void
  + getUsuarioActivo(): Usuario
  + tienePermiso(permiso: Permiso): boolean
}

class UtilidadClave {
  + {static} hashClave(clave: String): String
  + {static} verificarClave(claveIngresada: String, claveHasheada: String): boolean
  + {static} generarClaveAleatoria(): String
}

' ============================== SERVICIOS DE GESTIÓN DE USUARIOS ==============================
class ServicioUsuarios {
  - validarDatos(correo:String, nombreUsuario:String): void
  + crearUsuario(nombreCompleto: String, cedula: String, correo: String, celular: String, estadoActivo: boolean, nombreUsuario: String, cargoSeleccionado: Rol): void
'  + buscarUsuarioPorCorreo(correo: String): Usuario
'  + buscarUsuarioPorNombreUsuario(nombreUsuario: String): Usuario
'  + buscarUsuarioPorId(id: Long): Usuario
  + listarUsuarios(): List<Usuario>
  + eliminarUsuario(id: Long): void
  + actualizarEstado(usuario: Usuario, estado: Boolean): void
  + actualizarRolUsuario(idUsuario: Long, nuevoRol: Rol): void
  + recuperarClave(correo: String): void
  + actualizarClaveTemporal(usuario: Usuario, nuevaClave: String): void
}

class ServicioPerfilUsuario {
'  + puedeActualizarPerfil(usuario: Usuario, id: Long): boolean
'  + cambiarClave(usuario: Usuario, antigua: String, nueva: String): boolean
'  + obtenerPerfil(id: Long): Usuario
'  + actualizarPerfil(usuario: Usuario, correo: String, celular: String): void
+actualizarCorreo(usuarioActivo: Usuario, nuevoEmail: String): void
+actualizarCelular(usuarioActivo: Usuario, nuevoCelular: String): void
+actualizarClave(usuarioActivo: Usuario, claveActual: String ,nuevaClave: String): void
}

class ServicioRoles {
  + obtenerRolPorIdUsuario(idUsuario: Long): Rol
  + listarRoles(): List<Rol>
  + rolTienePermiso(idRol: Long, permiso: Permiso): boolean
  + crearRol(rol: Rol): void
  + actualizarRol(rol: Rol): void
  + activarRol(idRol: Long): void
  + desactivarRol(idRol: Long): void
  + obtenerPermisosDelRol(idRol: Long): Set<Permiso>
}

' ============================== SERVICIOS DE COMUNICACIÓN ==============================
class ContenidoMensaje {
  - asunto: String
  - cuerpo: String
  --
  + {static} crearMensajeCreacionUsuario(nombreCompleto: String, nombreUsuario: String, clave: String): ContenidoMensaje
  + {static} crearMensajeRecuperacionClave(nombreCompleto: String, nuevaClave: String): ContenidoMensaje
}

}

' ============================== RELACIONES DE DEPENDENCIA ==============================

ServicioUsuarios .> ValidadorUsuario
ServicioUsuarios .> UtilidadClave
ServicioUsuarios .> ContenidoMensaje
ServicioPerfilUsuario .> ValidadorUsuario
ServicioPerfilUsuario .> UtilidadClave
ServicioPerfilUsuario .> Usuario
ServicioUsuarios ..> Usuario
ServicioSesionSingleton ---> Usuario
ServicioRoles ...> Rol

package controladores {

' ============================== CONTROLADORES PRINCIPALES ==============================
class ControladorGestionUsuarios {
  + initialize(): void
  + onAgregarUsuario(): void
  + onEliminar(): void
  + onBuscar(): void
  + onLimpiar(): void
  + onBackAction(): void
}

class ControladorLogin {
  + initialize(): void
  + onIniciarSesion(): void
  + onRecuperarContrasena(): void
  + validarCampos(): boolean
}

class ControladorPortalPrincipal {
  + initialize(): void
  + onCerrarSesion(): void
  + onGestionUsuarios(): void
  + onGestionSalas(): void
  + onGestionPeliculas(): void
  + onVentaBoletos(): void
  + onReportes(): void
  + onPerfil(): void
}

' ============================== CONTROLADORES DE PERFIL ==============================
class ControladorPerfil {
  + initialize(): void
  + onActualizarContacto(): void
  + onCambiarContrasena(): void
  + onRegresar(): void
}

class ControladorActualizarContacto {
  + initialize(): void
  + onGuardar(): void
  + onCancelar(): void
}

class ControladorCambiarContrasena {
  + initialize(): void
  + onGuardar(): void
  + onCancelar(): void
}

' ============================== CONTROLADORES DE REGISTRO Y RECUPERACIÓN ==============================
class ControladorRegistrarUsuario {
  + initialize(): void
  + onGuardar(): void
  + onCancelar(): void
  + limpiarCampos(): void
}

class ControladorRecuperarContrasena {
  + initialize(): void
  + onEnviarCodigo(): void
  + onRegresar(): void
}

class ControladorCambioClaveObligatorio {
  + initialize(): void
  + onCambiarClave(): void
}

}

' Relaciones Controladores
ControladorLogin .> ServicioSesionSingleton
ControladorPortalPrincipal .> ServicioSesionSingleton
ControladorGestionUsuarios .> ServicioUsuarios
ControladorGestionUsuarios .> ServicioRoles
ControladorPerfil .> ServicioPerfilUsuario
ControladorRegistrarUsuario .> ServicioUsuarios
ControladorRegistrarUsuario .> ServicioRoles
ControladorRecuperarContrasena .> ServicioUsuarios
ControladorCambioClaveObligatorio .> ServicioUsuarios
ControladorCambiarContrasena .> ServicioPerfilUsuario
ControladorActualizarContacto .> ServicioPerfilUsuario

}



package peliculas {
    ' ==================== PAQUETE: MODELO ====================
    package modelos {
            class Cartelera {
                - peliculas: List<Pelicula>
            }

            enum DiaSemana {
                LUNES, MARTES, MIERCOLES, JUEVES
                VIERNES, SABADO, DOMINGO
                --
                - precio: BigDecimal {readOnly}
                --
                + {static} obtenerDiaDeFecha(fechaHora: LocalDateTime): DiaSemana
                + esFinDeSemana(): boolean
            }

            enum FormatoFuncion {
                DOS_D, TRES_D
                --
                - multiplicadorPrecio: BigDecimal {readOnly}
                --
                + {static} fromString(value: String): FormatoFuncion
            }

            class Funcion {
                - id: int
                - pelicula: Pelicula
                - sala: Sala
                - fechaHoraInicio: LocalDateTime
                - fechaHoraFin: LocalDateTime
                - formato: FormatoFuncion
                - tipoEstreno: TipoEstreno
            }

            enum Genero {
                ACCION, COMEDIA, DRAMA, TERROR, CIENCIA_FICCION
                ANIMACION, ROMANCE, DOCUMENTAL, AVENTURA, FANTASIA
                --
                - nombre: String {readOnly}
                --
                + {static} porNombre(nombre: String): Genero
                + {static} obtenerTodosLosGeneros(): List<String>
            }

            enum Idioma {
                ESPANOL, INGLES, CHINO
                --
                - nombre: String {readOnly}
                - codigo: String {readOnly}
                --
                + {static} porCodigo(codigo: String): Idioma
            }

            class Pelicula {
                - id: int
                - titulo: String
                - sinopsis: String
                - duracionMinutos: int
                - anio: int
                - idioma: Idioma
                - generos: List<Genero>
                - imagenUrl: String
                --
                + agregarGenero(genero: Genero): void
                + eliminarGenero(genero: Genero): void
                + getGenerosComoString(): String
            }

            enum TipoEstreno {
                ESTRENO, PREESTRENO
                --
                - multiplicadorPrecio: BigDecimal {readOnly}
            }
    }

    ' ==================== PAQUETE: SERVICIOS ====================
    package servicios {
        class ServicioFuncion {
            + crearFuncion(...): Funcion
            + actualizarFuncion(...): void
            + listarTodasLasFunciones(): List<Funcion>
            + buscarFuncionPorId(id: int): Funcion
            + listarFuncionesPorSala(salaId: int): List<Funcion>
            + eliminarFuncion(id: int): void
            + obtenerFuncionesPorNombrePelicula(...): List<Funcion>
        }

        class ServicioPelicula {
            + crearPelicula(...): Pelicula
            + actualizarPelicula(...): void
            + eliminarPelicula(id: int): void
            + buscarPeliculaPorId(id: int): Pelicula
            + listarTodasLasPeliculas(): List<Pelicula>
            + buscarPeliculasPorTitulo(titulo: String): List<Pelicula>
            + existePeliculaDuplicada(titulo: String, anio: int): boolean
        }
    }

    ' ==================== PAQUETE: CONTROLADORES ====================
    package controladores {
        class ControladorCartelera {
            - servicioPelicula: ServicioPelicula
            - cartelera: Cartelera
            - peliculaSeleccionada: Pelicula
            --
            + obtenerCartelera(): List<Pelicula>
        }

        class ControladorDetallesCartelera {
            - peliculaActual: Pelicula
            - servicioFuncion: ServicioFuncion
            --
            + cargarPelicula(pelicula: Pelicula): void
        }

        class ControladorDetallesFuncion {
            - funcionActual: Funcion
            --
            + cargarFuncion(funcion: Funcion): void
        }

        class ControladorDetallesPelicula {
            - servicioPelicula: ServicioPelicula
            - pelicula: Pelicula
            --
            + cargarPelicula(pelicula: Pelicula): void
        }

        class ControladorFormularioFuncion {
            - servicioFuncion: ServicioFuncion
            - servicioPelicula: ServicioPelicula
            - servicioSala: ServicioSala
            - funcionEditando: Funcion
            - modoEdicion: boolean
            --
            + configurarParaEdicion(funcion: Funcion): void
        }

        class ControladorFormularioPelicula {
            - servicioPelicula: ServicioPelicula
            - peliculaEditando: Pelicula
            - modoEdicion: boolean
            --
            + configurarParaEdicion(pelicula: Pelicula): void
        }

        class ControladorFunciones {
            - servicioFuncion: ServicioFuncion
            - servicioSala: ServicioSala
            - listaFunciones: ObservableList<Funcion>
            --
            + obtenerFuncionesPorNombrePelicula(...): List<Funcion>
        }

        class ControladorPelicula {
            - servicioPelicula: ServicioPelicula
            - listaPeliculas: ObservableList<Pelicula>
        }

        class ControladorSeleccionFuncion {
            - servicioPelicula: ServicioPelicula
            - servicioFuncion: ServicioFuncion
            - servicioSala: ServicioSala
            - cartelera: Cartelera
            - peliculaSeleccionada: Pelicula
            - fechaSeleccionada: LocalDate
        }
    }

    ' ==================== RELACIONES ====================

    peliculas.modelos.Cartelera "1" -- "0..*" peliculas.modelos.Pelicula
    peliculas.modelos.Pelicula "1" -- "1" peliculas.modelos.Idioma
    peliculas.modelos.Pelicula "1" -- "1..*" peliculas.modelos.Genero
    peliculas.modelos.Funcion "1" -- "1" peliculas.modelos.Pelicula
    peliculas.modelos.Funcion "1" -- "1" salas.modelos.entidades.Sala
    peliculas.modelos.Funcion "1" -- "1" peliculas.modelos.FormatoFuncion
    peliculas.modelos.Funcion "1" -- "1" peliculas.modelos.TipoEstreno
    peliculas.modelos.Funcion .up.> peliculas.modelos.DiaSemana : usa

    peliculas.servicios.ServicioPelicula ..> peliculas.modelos.Pelicula : gestiona
    peliculas.servicios.ServicioFuncion ..> peliculas.modelos.Funcion : gestiona

    peliculas.servicios.ServicioPelicula <.left. peliculas.controladores.ControladorPelicula
    peliculas.servicios.ServicioPelicula <.left. peliculas.controladores.ControladorFormularioPelicula
    peliculas.servicios.ServicioPelicula <.left. peliculas.controladores.ControladorDetallesPelicula
    peliculas.servicios.ServicioPelicula <.left. peliculas.controladores.ControladorCartelera
    peliculas.servicios.ServicioPelicula <.left. peliculas.controladores.ControladorSeleccionFuncion

    peliculas.servicios.ServicioFuncion <.left. peliculas.controladores.ControladorFunciones
    peliculas.servicios.ServicioFuncion <.left. peliculas.controladores.ControladorFormularioFuncion
    peliculas.servicios.ServicioFuncion <.left. peliculas.controladores.ControladorDetallesCartelera
    peliculas.servicios.ServicioFuncion <.left. peliculas.controladores.ControladorSeleccionFuncion

    salas.servicios.ServicioSala <.left. peliculas.controladores.ControladorFunciones
    salas.servicios.ServicioSala <.left. peliculas.controladores.ControladorFormularioFuncion
    salas.servicios.ServicioSala <.left. peliculas.controladores.ControladorSeleccionFuncion

    peliculas.controladores.ControladorFormularioPelicula "1" -- "0..1" peliculas.modelos.Pelicula : edita
    peliculas.controladores.ControladorDetallesPelicula "1" -- "1" peliculas.modelos.Pelicula : muestra
    peliculas.controladores.ControladorFormularioFuncion "1" -- "0..1" peliculas.modelos.Funcion : edita
    peliculas.controladores.ControladorDetallesFuncion "1" -- "1" peliculas.modelos.Funcion : muestra
    peliculas.controladores.ControladorDetallesCartelera "1" -- "1" peliculas.modelos.Pelicula : muestra
    peliculas.controladores.ControladorCartelera "1" -- "1" peliculas.modelos.Cartelera : gestiona
    peliculas.controladores.ControladorSeleccionFuncion "1" -- "1" peliculas.modelos.Cartelera : usa
}

package salas {
package modelos {

package entidades{
    class Sala {
        -id: int
        -nombre: String
        -capacidad: int
        -tipo: TipoSala
        -estado: EstadoSala
    }
   class Butaca {
   -id: int
   -idSala: int
   -fila: String
   -columna: String
   -estado: EstadoButaca
   }
   enum EstadoSala{
   DISPONIBLE,
   MANTENIMIENTO
   }
   enum EstadoButaca{
   DISPONIBLE,
   OCUPADA,
   INHABILITADA
   }
   abstract class SalaFactory{
   +crearSala(int id, String nombre, int capacidad, EstadoSala estado)
   }
   class SalaNormalFactory implements SalaFactory{
   +crearSala(int id, String nombre, int capacidad, EstadoSala estado) {
   }
   class SalaVIPFactory implements SalaFactory{
   +crearSala(int id, String nombre, int capacidad, EstadoSala estado)
   }
   enum TipoSala{
   -multiplicador: double
   NORMAL(1.00),
   VIP(1.50)
   +getMultiplicador()

   }

   }



    }

    Sala -u> TipoSala
    SalaNormalFactory -u> Sala
    SalaVIPFactory -u> Sala
    Sala -u> EstadoSala
    Sala o- Butaca
    Butaca -u> EstadoButaca
    package servicios{
    class ServicioButaca{
    +listarButacasPorSala() : List<Butaca>
    +generarButacasAutomatica() : void
    +crearButaca(Butaca butaca) : void
    +actualizarButaca(Butaca butaca) : void
    +validarDatosBasicos(Butaca butaca) : void
    +listarTodasButacas() : List<Butaca>
    +eliminarButaca(int id) : void
    }
    class ServicioSala{
    -ServicioButaca : ServicioButaca
    +crearSala(Sala sala) : void
    +obtenerSalaPorId(int id) : Sala
    +listarSalas() : List<Sala>
    +actualizarSala(Sala sala) : void
    +eliminarSala(int id) : void
    +buscarSalaPorNombre(String nombre) : List<Sala>
    }
    }
    package controladores{
    class ControladorSalas {

        -servicioSala: ServicioSala
        -salas: ObservableList<Sala>
        -servicioButaca: ServicioButaca
        -salaEnEdicion: Sala
        +initialize(): void
        +onGuardar(event: ActionEvent): void
        +onBackAction(event: ActionEvent): void
    }
    class ControladorButacas {
        -servicioSala : ServicioSala
        -servicioButaca: ServicioButaca
        -salas: ObservableList<Sala>
        -butacas: ObservableList<Butaca>
        +initialize(): void
        +onBackAction(event: ActionEvent): void
    }
    class ControladorDeConsultaSalas {
        -servicioButaca : ServicioButaca
        -butacasSeleccionadas: List<Butaca>
        -controladorAsignadorButacas: ControladorAsignadorButacas
        +initialize(location: URL, resources: ResourceBundle): void
        +mostrarButacasDeSala(codigosButacasOcupadas: Set<Integer>, salaSeleccionada: Sala): void
        +getButacasSeleccionadas(): List<Butaca>
        +setControladorAsignadorButacas(controladorAsignadorButacas: ControladorAsignadorButacas): void
    }
    }

ServicioSala -u-> ServicioButaca
ControladorButacas -u-> ServicioSala
ControladorButacas -u-> ServicioButaca
Sala -u-o ControladorButacas
Butaca -u-o ControladorButacas
ControladorSalas -u-> ServicioSala
ControladorSalas o-u- Sala
ControladorSalas -u-> ServicioButaca
ControladorDeConsultaSalas -u-> ServicioButaca
ControladorDeConsultaSalas o-u- Butaca
ControladorSalas -u-> SalaFactory
}

package venta_boletos {


' ------------------ CONTROLADORES ------------------

package controladores {

    class ControladorAsignadorButacas {
        - funcionSeleccionada: Funcion
        - ControladorInformacionDeVenta: ControladorInformacionDeVenta
        - controladorDeConsultaSalas: ControladorDeConsultaSalas
        - butacasSeleccionadas: List<Butaca>
        + inicializarDatos(funcionSeleccionada: Funcion): void
        - cargarMapaButacas(codigosButacasOcupadas: Set<Integer>, salaSeleccionada: Sala): void
        + agregarButacaSeleccionada(butaca: Butaca): void
        + quitarButacaDeseleccionada(butaca: Butaca): void
    }

    class ControladorFacturacion {
        - servicioFacturacion: ServicioFacturacion
        - servicioCliente: ServicioCliente
        - ControladorInformacionDeVenta: ControladorInformacionDeVenta
        - boletos: List<Producto>
        + cargarBoletosSeleccionados(boletos: List<Producto>): void
        - crearCliente(): void
        - actualizarCliente(): void
        - buscarCliente(): void
        - pagarBoletos(): void
        - validarNumeroDocumentoCliente(): boolean
        - timerLabel: Label
    }

    class ControladorInformacionDeVenta {
        - cantidadDeButacasSeleccionadas: int
        + cargarInformacionDeFuncionSeleccionada(funcion: Funcion): void
        + calcularPosibleSubtotal(butacasSeleccionadas: List<Butaca>, funcion: Funcion): void
        + calcularTotal(boletos: List<Producto>): void
        + cargarButacaSeleccionada(butaca Butaca): void
        + removerButacaSeleccionada(butaca Butaca): void
    }

    class ControladorVisualizadorCartelera {
        - servicioVisualizarCartelera: ServicioVisualizarCartelera
        - cargarCartelera(peliculas: List<Pelicula>): void
    }   

    class ControladorVisualizadorFunciones {
        - servicioVisualizadorFunciones: ServicioVisualizadorFunciones
        - peliculaSeleccionada: Pelicula
        + asignarPeliculaSeleccionada(pelicula: Pelicula): void
        - cargarInformacionPeliculaSeleccionada(pelicula: Pelicula): void
        - cargarFunciones(): void
    }
}

' ------------------ SERVICIOS ------------------
package servicios{

    class ServicioContenidoFactura {
        +generarFactura(factura: Factura): void
        +generarBoletos(boletos: List<Producto>): void
        +unirPDFsFacturaYBoletos(facturaFile: File, boletosFiles: List<File>, archivoSalida: File): void
        +generarNombreArchivoBoleto(boleto: Boleto): String
    }

    class ServicioFacturacion {
        + generarFactura(productos: List<Producto>, cliente: Cliente, calculadorImpuesto: CalculadorImpuesto): void
    }

    interface ServicioGeneradorArchivo {
        + generarFactura(factura: Factura): void
        + generarBoletos(boletos: List<Producto>): void
    }

    class ServicioGeneradorArchivoPDF implements ServicioGeneradorArchivo {
        + generar(factura: Factura): void
        + generar(boletos: List<Producto>): void
        - crearCarpetaSiNoExiste(carpeta: String): void

    }

    class ServicioGeneradorBoleto{
        + generarBoletos(funcion: Funcion, butacas: List<Butaca>): List<Boleto>
    }

    class ServicioVisualizadorCartelera {
        - controladorCartelera: ControladorCartelera
        - peliculaSeleccionada: Pelicula
        + cargarPeliculasDeCartelera(): void
        + seleccionarPelicula(pelicula: Pelicula, currentStage: Stage): void
        - validarSeleccionPelicula(pelicula: Pelicula): void
    }

    class ServicioVisualizadorFunciones {
        - controladorFunciones: ControladorFunciones
        + cargarFunciones(pelicula: Pelicula): List<Funcion>
        + seleccionarFuncion(tabla: TableView<Funcion>): void
        - validarSeleccionFuncion(funcion: Funcion): void
    }

    class ServicioCliente {
        + crearCliente(cliente: Cliente): void
        + actualizarCliente(cliente: Cliente): void
        + buscarCliente(numeroIdentificacion: String): Cliente
        + existeCliente(numeroIdentificacion: String): boolean
    }

    class ServicioTemporizador{
        - {static} instancia: ServicioTemporizador
        - temporizador: Timer
        - tempEnEjecucion: boolean
        - finTiempo: long
        - tiempoRestante: StringProperty
        --
        + {static} getInstancia(): ServicioTemporizador
        + empezarTemporizador(stage: Stage): void
        + detenerTemporizador(): void
        + tempEnEjecucion(): boolean
        + tiempoRestanteProperty(): StringProperty
    }

}

' ------------------ MODELOS ------------------
package modelos {

    class Boleto {
        - funcion: Funcion
        - butaca: Butaca
    }

    interface CalculadorImpuesto {
        + calcularImpuesto(subtotal: double): double
    }

    class CalculadorIVA {
        - {static} IVA_TASA: double
    }

    class Cliente {
        - idCliente: String
        - tipoDocumento: String
        - nombre: String
        - apellido: String
        - correoElectronico: String
    }

    class Factura {
        - codigoFactura: long
        - fecha: String
        - cliente: Cliente
        - productos: List<Producto>
        - subtotal: double
        - total: double
        + calcularSubTotal(): void
        + calcularTotal(calculadorImpuesto:CalculadorImpuesto): void
    }

    abstract class Producto {
        - precio: double
        + {abstract} calcularPrecio(): void
    }

}


' ------------------ RELACIONES ------------------

' Relaciones de composición y agregación (tienen instancias como atributos)
ControladorFacturacion *--> ServicioFacturacion
ControladorFacturacion *--> ServicioCliente
ControladorVisualizadorCartelera --> ServicioVisualizadorCartelera
ControladorVisualizadorFunciones --> ServicioVisualizadorFunciones
ControladorAsignadorButacas o--> ControladorInformacionDeVenta
ControladorFacturacion o--> ControladorInformacionDeVenta

' Relaciones de uso/dependencia (se crean o usan temporalmente)
ControladorAsignadorButacas ..> ServicioGeneradorBoleto
ControladorFacturacion ..> ContextoValidacion
ControladorFacturacion ..> CalculadorImpuesto


' Servicios que crean o usan entidades
ServicioGeneradorBoleto ..> Boleto
ServicioFacturacion ..> Factura
ServicioFacturacion ..> ServicioGeneradorArchivoPDF
ServicioFacturacion ..> ServicioContenidoFactura
ServicioContenidoFactura ..> EstrategiaExportarPDF
ServicioFacturacion ..left> Cliente

' Relaciones de herencia e implementación
Producto <|-- Boleto
CalculadorIVA ..up|> CalculadorImpuesto

' Asociaciones entre entidades
Factura "1" *-- "1..*" Producto
Factura "1" *-- "1..*" Cliente
Boleto "1" *-- "1" Funcion
Boleto "1" *-- "1" Butaca

' Patrón Strategy
ContextoValidacion o--> EstrategiaValidacion

' Uso de interfaces/clases abstractas
Factura ..> CalculadorImpuesto

ControladorReportesPrincipal --> Exportable
ServicioFacturacion ..> ServicioCorreoSingleton


}

package utilidades {

    package estrategiaValidacionDocumentos 
    {

        class ContextoValidacion #lightblue {
            - estrategia: EstrategiaValidacion
            + setEstrategia(estrategia: EstrategiaValidacion): void
            + ejecutarEstrategia(documento: String): boolean
        }
        
        class EstrategiaCedulaValidacion #lightblue implements EstrategiaValidacion  {
        }
        interface EstrategiaValidacion #lightblue {
            + validar(documento: String): boolean
        }

        class EstrategiaPasaporteValidacion #lightblue implements EstrategiaValidacion {
        }

        class EstrategiaRucValidacion #lightblue extends EstrategiaCedulaValidacion {
        }
    }

    package estrategiaParaDocumentos {
        interface Exportable {
            +exportar(reporte: ReporteGenerado, archivo: File, datos: Map<String, Object>): void
        }

        class EstrategiaExportarPDF implements Exportable {
            +crearDocumentoPDF(): PDDocument
            +guardarPDF(document: PDDocument, archivo: File): void
        }

        class EstrategiaExportarCSV implements Exportable {

        }
    }

    class ServicioCorreoSingleton {
        - instancia: ServicioCorreoSingleton
        - remitente: String
        - clave: String
        - sesion: Session
        - transport: Transport
        - ServicioCorreoSingleton()
        + getInstancia(): ServicioCorreoSingleton
        - crearSesionSMTP(): Session
        + enviarCorreo(destinatario: String, contenido: ContenidoMensaje): boolean
        + enviarCorreo(destinatario: String, contenido: ContenidoMensaje, adjunto: File): boolean
    }
}

package "Reportes"{
    ' ===== MODELO (REPORTES) =====
    package "Modelo" {

       interface EstrategiaDeFrecuencia #lightblue{
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }

    class EstrategiaDiaria #lightblue implements EstrategiaDeFrecuencia {
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }
    class EstrategiaSemanal #lightblue implements EstrategiaDeFrecuencia {
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }
    class EstrategiaMensual #lightblue implements EstrategiaDeFrecuencia {
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }
    class EstrategiaTrimestal #lightblue implements EstrategiaDeFrecuencia {
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }
    class EstrategiaAnual #lightblue implements EstrategiaDeFrecuencia {
        + LocalDateTime calcularSiguiente(LocalDateTime fechaGeneracion)
    }

    class ReporteGenerado {
        - int id
        - String nombre
        - String tipo
        - LocalDateTime fechaGeneracion
        - String rutaArchivo
        - String descripcion
        - String estado
        - String frecuencia
        --
    }
        
        
    }

    ' ===== SERVICIOS (REPORTES) =====
    package "Servicios" {

        class ServicioDeReportes {
        --
        + ServicioDeReportes()
        + Map<String, Object> getResumenDeVentas()
        + List<Map<String, Object>> getEstadisticasDeBarras()
        + List<Map<String, Object>> obtenerDatosFiltrados(List<Map<String, Object>> datos, String desde, String hasta)
        }
        class ServicioReportesProgramados #lightblue {
            - static ServicioReportesProgramados instance
            - List<ReporteGenerado> reportesPendientes
            - ObservableList<ReporteGenerado> reportesEjecutados
            - ScheduledExecutorService scheduler
            --
            - ServicioReportesProgramados()
            + static ServicioReportesProgramados getInstance()
            + void iniciarScheduler()
            + void detenerScheduler()
            + List<ReporteGenerado> getReportesPendientes()
            + ObservableList<ReporteGenerado> getReportesEjecutados()
            - void revisarReportesPendientes()
            - EstrategiaDeFrecuencia getStrategy(String frecuencia)
            - LocalDateTime calcularSiguienteEjecucion(LocalDateTime fechaGeneracion, String frecuencia)
            + String calcularProximaEjecucion(String fechaGeneracionStr, String frecuencia)
        }
        ServicioReportesProgramados --> ReporteGenerado
        ServicioReportesProgramados --> EstrategiaDeFrecuencia
    }


    ' ===== CONTROLADOR (REPORTES) =====
    package "Controlador" {

        class ControladorReportesPrincipal {
            - Button botonRegresar
            - Button botonFiltrar
            - Button botonConfirmar
            - ComboBox<String> elegirHorario
            - BarChart<String, Number> diagramaBarras
            - PieChart diagramaPastel
            - ObservableList<ReporteGenerado> reportesGenerados
            - ServicioDeReportes servicioReportes
            - Map<String, Object> datos
            - List<Map<String, Object>> estadisticas
            - List<ReporteGenerado> reportesSimulados
            --
            + void initialize()
            - void configurarTablaReportes()
            - List<ReporteGenerado> cargarReportesDesdeCarpeta()
            - void cargarReportesSimulados()
            - void inicializarGraficasVacias()
            - void abrirReporte(ReporteGenerado reporte)
            + void irAReporteProgramado(ActionEvent event)
            + void filtrar(ActionEvent event)
            + void confirmarReporte(ActionEvent event)
            - void actualizarGraficaBarras(List<Map<String, Object>> estadisticas)
            - void actualizarGraficaPastel(List<Map<String, Object>> estadisticas)
            - void exportarReporte(Exportable strategy, String tipo)
            - void mostrarPrevisualizacionReporte(List<Map<String, Object>> datos, boolean permitirDescarga)
            - VBox generarContenidoReporteCompleto(List<Map<String, Object>> datos)
            - HBox crearEstadistica(String titulo, String valor)
            - BarChart<String, Number> crearGraficaBarrasPreview(List<Map<String, Object>> datos)
            - PieChart crearGraficaPastelPreview(List<Map<String, Object>> datos)
            - Label crearCeldaTabla(String texto, boolean esHeader)
            + void volverEscena(ActionEvent event)
        }
    
        class ControladorReportesProgramados {
            - Button botonRegresar
            - ComboBox<String> elegirFrecuencia
            - ServicioReportesProgramados servicioReporteProgramado
            - ServicioDeReportes servicioVentas
            - Map<String, Object> datos
            --
            + void initialize()
            - void inicializarTablaReportes()
            + void confirmarReporteProgramado(ActionEvent event)
            - boolean existeReporteConFrecuencia(String frecuencia)
            - void mostrarVentanaPrevia()
            - Label crearCeldaTabla(String texto, boolean esHeader)
            - HBox crearFilaTabla(String fecha, String boletos, String ingresos)
            - void agregarReporteATabla(String fechaEjecucion)
            + void eliminarReporteProgramado(ReporteGenerado reporte)
            - void mostrarVistaPrevia(ReporteGenerado reporte)
            - VBox generarContenidoReporte(ReporteGenerado reporte)
            - void descargarReporte(ReporteGenerado reporte, String formato)
            + void irAReportesPrincipal(ActionEvent event)
            + void volverEscena(ActionEvent event)
        }
    ControladorReportesPrincipal --> ServicioDeReportes
    ControladorReportesPrincipal --> Exportable
    ControladorReportesPrincipal --> EstrategiaExportarPDF
    ControladorReportesPrincipal --> EstrategiaExportarCSV
    
    
    
    ControladorReportesProgramados --> ServicioReportesProgramados
    ControladorReportesProgramados --> ServicioDeReportes
    ControladorReportesProgramados --> Exportable
    ControladorReportesProgramados --> EstrategiaExportarPDF
    ControladorReportesProgramados --> EstrategiaExportarCSV
    
    ServicioReportesProgramados --> ServicioReportesProgramados
    
    
    ReporteGenerado <-- ControladorReportesPrincipal
    ReporteGenerado <-- ControladorReportesProgramados
    }
}

' ============================== RELACIONES GENERALES ==============================
ControladorAsignadorButacas ..> ControladorDeConsultaSalas
ControladorPortalPrincipal ..> ControladorVisualizadorCartelera
ControladorPortalPrincipal ..> ControladorPelicula
ControladorPortalPrincipal ..> ControladorFunciones
ControladorPortalPrincipal ..> ControladorSalas
ControladorPortalPrincipal ..> ControladorReportes
ControladorVisualizadorCartelera ..> ControladorCartelera 
ControladorVisualizadorFunciones ..> ControladorFunciones 
@enduml
